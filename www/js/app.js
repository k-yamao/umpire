var module = angular.module('umpire-app', ['onsen']);document.addEventListener ("deviceready", onDeviceReady, false);//this function runs when phoneGap is readyfunction onDeviceReady () {    console.log('PhoneGap is ready!!!');}// リクエストのときパラメータを変換module.config(function ($httpProvider) {    $httpProvider.defaults.transformRequest = function(data){        if (data === undefined) {            return data;        }        return $.param(data);    }});// コントローラーmodule.controller('umpireCtrl', function($scope, $http, $sce, $q, $anchorScroll, $location) {    // document.readyの実装    angular.element(document).ready(function () {        // デバイスIDを取得し、ものまねリストを取得する        monaca.getDeviceId(function(id){            // デバイスIDを取得する            if (id != undefined){                $scope.uid = id;                            } else {                var nU = Math.floor( new Date().getTime() / 1000 );                $scope.uid = nU;            }            $scope.initScore();         });            });    // スコア入力 初期値は非表示    $scope.inputPanel = {        status      : false,        nameStatus  : false,        nameStatusFirst : false,        nameStatusSecond: false,        teamname    : '',        teamnameEdit: '',        teamnum     : 0,        inning  : 0,        point   : '',        totalPointFirst : 0,        totalPointSecond : 0    };    // カウンター    $scope.count = {        ball    :0,        strike  :0,        out     :0    };    // スコア一覧    $scope.scoreList = [];        $scope.summary   =[];    $scope.uid = 413;// ID        $scope.db = null;    $scope.istable = false;    $scope.conf = {        "database_name"         : "database",   // DB名        "database_version"      : "1.0",        // バージョン        "database_displayname"  : "umpiredb",   // 表示名        "database_size"         : 1000000,    // サイズ    };    // ボールカウントカラー    $scope.isCount = function(type, count) {        switch (type){            case 'ball':                if (count <= $scope.count.ball) {                    return true;                }                return false;            break;            case 'strike':                if (count <= $scope.count.strike) {                    return true;                }                return false;                    break;            case 'out':                if (count <= $scope.count.out) {                    return true;                }                return false;                    break;        }    };    // カウンターイベント、カウントアップ処理    $scope.countup = function(type) {                switch (type){            case 'ball':                                if ($scope.count.ball == 3) {                    $scope.count.ball = 0;                } else {                    $scope.count.ball = $scope.count.ball + 1;                                        }                                            break;            case 'strike':                if ($scope.count.strike == 2) {                    $scope.count.strike = 0;                } else {                    $scope.count.strike = $scope.count.strike + 1;                                        }                            break;            case 'out':                if ($scope.count.out == 2) {                    $scope.count.out = 0;                } else {                    $scope.count.out = $scope.count.out + 1;                    }                            break;        }       };        // スコア入力パネルを表示する    $scope.scorePanel = function(teamnum, inning, point) {                if (inning == 10) {            return false;        }                $scope.inputPanel.status = true;        $scope.inputPanel.teamnum = teamnum;        $scope.inputPanel.inning = inning;                // チーム名編集の表示        if ($scope.inputPanel.inning == 0) {            // チーム名編集の項目を表示させる            $scope.inputPanel.nameStatus = true;                        // スコアリストからダイアログのチーム名へ代入            if ($scope.inputPanel.teamnum == 0) {                $scope.inputPanel.nameStatusFirst = true;                $scope.inputPanel.nameStatusSecond = false;                $scope.inputPanel.teamnameEdit = $scope.scoreList[$scope.inputPanel.inning].first;            } else {                $scope.inputPanel.nameStatusSecond = true;                $scope.inputPanel.nameStatusFirst  = false;                $scope.inputPanel.teamnameEdit = $scope.scoreList[$scope.inputPanel.inning].second;            }        } else {            // チーム名編集の項目を非表示にする            $scope.inputPanel.nameStatus = false;            $scope.inputPanel.nameStatusSecond = false;            $scope.inputPanel.nameStatusFirst  = false;            if ($scope.inputPanel.teamnum == 0) {                $scope.inputPanel.point = $scope.scoreList[$scope.inputPanel.inning].first;            } else {                $scope.inputPanel.point = $scope.scoreList[$scope.inputPanel.inning].second;            }        }    };    // 編集中のイニング    $scope.isEdit = function(teamnum, inning) {                if ($scope.inputPanel.status == true && $scope.inputPanel.teamnum === teamnum  && $scope.inputPanel.inning === inning) {            return true;        }        return false;    };    // イニング変更「PREV」、「NEXT」ボタンイベント    $scope.changePrevNextInning = function(change) {        // NEXT        if (change > 0) {            if ($scope.inputPanel.teamnum == 0) {                // 先行の状態だと後攻のチームへ変更                $scope.inputPanel.teamnum = 1;             } else {                // 後攻の状態だと先行のチームへ変更                $scope.inputPanel.teamnum = 0;                                if ($scope.inputPanel.inning == 12) {                    // 「E」だとチーム名へ                    $scope.inputPanel.inning = 0;                } else if ($scope.inputPanel.inning == 9) {                    $scope.inputPanel.inning = $scope.inputPanel.inning + 2;                } else {                    // イニングをカウントアップ                    $scope.inputPanel.inning = $scope.inputPanel.inning + 1;                }            }                               } else {        // PREV             if ($scope.inputPanel.teamnum == 1) {                // 後攻の状態だと先行のチームへ変更                $scope.inputPanel.teamnum = 0;             } else {                // 先攻の状態だと後行のチームへ変更                $scope.inputPanel.teamnum = 1;                                if ($scope.inputPanel.inning == 0) {                                        // チーム名だと「E」へ                    $scope.inputPanel.inning = 12;                } else if ($scope.inputPanel.inning == 11) {                    $scope.inputPanel.inning = $scope.inputPanel.inning - 2;                } else {                    // イニングをカウントダウン                    $scope.inputPanel.inning = $scope.inputPanel.inning - 1;                }            }                   }                // ポイントを取得        if ($scope.inputPanel.teamnum == 0) {            $scope.inputPanel.point = $scope.scoreList[$scope.inputPanel.inning].first;        } else {            $scope.inputPanel.point = $scope.scoreList[$scope.inputPanel.inning].second;        }        // ダイアログ表示処理へ渡す        $scope.scorePanel($scope.inputPanel.teamnum, $scope.inputPanel.inning ,$scope.inputPanel.point);    };     // 得点変更「-」、「+」ボタンイベント    $scope.changePoint = function(change) {        // ポイントのカウントアップ        if (change > 0) {            if ($scope.inputPanel.point == '') {                $scope.inputPanel.point = 0;                }            $scope.inputPanel.point = parseInt($scope.inputPanel.point) + 1;                    } else {        // ポイントのカウントダウン            if ($scope.inputPanel.point == '' || $scope.inputPanel.point == 0) {                $scope.inputPanel.point = 0;                } else {                $scope.inputPanel.point = parseInt($scope.inputPanel.point) - 1;                }        }                // 配列のスコアのデータセット        if ($scope.inputPanel.teamnum == 0) {            $scope.scoreList[$scope.inputPanel.inning].first = $scope.inputPanel.point;        } else {            $scope.scoreList[$scope.inputPanel.inning].second = $scope.inputPanel.point;        }        // 合計得点算出処理        $scope.totalPoint();        // ダイアログ表示処理へ渡す        $scope.scorePanel($scope.inputPanel.teamnum, $scope.inputPanel.inning ,$scope.inputPanel.point);    };    // 合計得点を集計    $scope.totalPoint = function() {        var totalFirst  = 0;        var totalSecond = 0;                for (var i=1; i<10; i++){                        var intFirst  = 0;            var intSecond = 0;                        if ($scope.scoreList[i].first !== '') {                intFirst = parseInt($scope.scoreList[i].first);            }            if ($scope.scoreList[i].second !== '') {                intSecond = parseInt($scope.scoreList[i].second);            }                        //console.log($scope.scoreList[i].first);            totalFirst = totalFirst + intFirst;            totalSecond = totalSecond  + intSecond;                   }                $scope.scoreList[10].first = totalFirst;        $scope.scoreList[10].second = totalSecond;            };        // 得点クリア処理    $scope.clearPoint = function() {        $scope.inputPanel.point = '';        // 配列のスコアのデータセット        if ($scope.inputPanel.teamnum == 0) {            $scope.scoreList[$scope.inputPanel.inning].first = $scope.inputPanel.point;        } else {            $scope.scoreList[$scope.inputPanel.inning].second = $scope.inputPanel.point;        }                // 合計得点算出処理        $scope.totalPoint();        // DBへ保存        $scope.updateScore();    };    // スコアセット    $scope.setScore = function() {        // ダイアログ非表示        $scope.inputPanel.status = false;        // ダイアログ用の得点を初期化        $scope.inputPanel.point = '';        // DBへ保存        $scope.updateScore();    };    // 初期処理    $scope.initScore = function(){        // データベースオブジェクト取得        $scope.db = $scope.getDB();               // テーブル存在チェック        $scope.checkTable($scope.db);    };    // データベースオブジェクト取得    $scope.getDB = function(){        return window.openDatabase($scope.conf.database_name, $scope.conf.database_version, $scope.conf.database_displayname, $scope.conf.database_size);    };    // スコアボードテーブルのチェック    $scope.checkTable = function(db){        db.transaction($scope.exeScoreCheck, $scope.errorDB);    };    // スコアボードテーブルのチェッククエリー    $scope.exeScoreCheck = function (tx) {        tx.executeSql('SELECT COUNT(*) cnt FROM sqlite_master WHERE type="' + 'table' + '"AND name="' + 'Umpire' + '"', [], $scope.successScoreCheck, $scope.errorDB);    };    // スコアボードテーブルのチェッククエリー成功    $scope.successScoreCheck = function(tx, results) {        if (results.rows.item(0).cnt > 0) {            $scope.istable = true;            //　テーブルデータの取得処理            $scope.getScoreData($scope.db);            //$scope.createDB($scope.db);          } else {            $scope.istable = false;            // データベース・テーブル作成処理            $scope.createDB($scope.db);          }    };    // データベース・テーブル作成処理    $scope.createDB = function(db){        db.transaction($scope.exeQuery, $scope.errorDB, $scope.successCreate);         };        // データベース・テーブル作成クエリー    $scope.exeQuery = function (tx) {        tx.executeSql('DROP TABLE IF EXISTS Umpire');        tx.executeSql('CREATE TABLE IF NOT EXISTS Umpire (id text, inning integer, first text, second text, up_date default CURRENT_TIMESTAMP,PRIMARY KEY (id, inning))');        tx.executeSql('INSERT INTO Umpire (id,inning,first,second) VALUES ("' + $scope.uid + '", 0, "TEAM1", "TEAM2")');        tx.executeSql('INSERT INTO Umpire (id,inning,first,second) VALUES ("' + $scope.uid + '", 1, "", "")');        tx.executeSql('INSERT INTO Umpire (id,inning,first,second) VALUES ("' + $scope.uid + '", 2, "", "")');        tx.executeSql('INSERT INTO Umpire (id,inning,first,second) VALUES ("' + $scope.uid + '", 3, "", "")');        tx.executeSql('INSERT INTO Umpire (id,inning,first,second) VALUES ("' + $scope.uid + '", 4, "", "")');        tx.executeSql('INSERT INTO Umpire (id,inning,first,second) VALUES ("' + $scope.uid + '", 5, "", "")');        tx.executeSql('INSERT INTO Umpire (id,inning,first,second) VALUES ("' + $scope.uid + '", 6, "", "")');        tx.executeSql('INSERT INTO Umpire (id,inning,first,second) VALUES ("' + $scope.uid + '", 7, "", "")');        tx.executeSql('INSERT INTO Umpire (id,inning,first,second) VALUES ("' + $scope.uid + '", 8, "", "")');        tx.executeSql('INSERT INTO Umpire (id,inning,first,second) VALUES ("' + $scope.uid + '", 9, "", "")');        tx.executeSql('INSERT INTO Umpire (id,inning,first,second) VALUES ("' + $scope.uid + '", 10, "0", "0")');        tx.executeSql('INSERT INTO Umpire (id,inning,first,second) VALUES ("' + $scope.uid + '", 11, "", "")');        tx.executeSql('INSERT INTO Umpire (id,inning,first,second) VALUES ("' + $scope.uid + '", 12, "", "")');            };        // データベース・テーブル作成成功処理    $scope.successCreate  = function(tx, results) {        $scope.getScoreData($scope.db);    };    // スコアボードテーブルのデータ取得    $scope.getScoreData = function(db){        db.transaction($scope.exeScoreData, $scope.errorDB);    };    // スコアボード取得クエリー    $scope.exeScoreData = function (tx) {        tx.executeSql('SELECT * FROM Umpire', [], $scope.querySuccessScore, $scope.errorDB);    };    // スコアボードテーブルを配列に格納    $scope.querySuccessScore = function(tx, results) {        var len = results.rows.length;        $scope.scoreList = [];        for (var i=0; i<len; i++){            var score = {};            score.id     = results.rows.item(i).id;            score.inning = results.rows.item(i).inning;            score.first  = results.rows.item(i).first;            score.second = results.rows.item(i).second;            $scope.scoreList.push(score);        }        $scope.$apply();    };    // データベースのエラー時の処理（アラート）    $scope.errorDB = function (err) {        console.log("SQL 実行中にエラーが発生しました: "+err.code);        navigator.notification.alert('データベースへ接続できませんでした。',  // メッセージ                null,         // コールバック                'エラー',            // タイトル                'OK'                  // ボタンの表示名            );    };    // データベースに問い合わせ    $scope.queryDB = function(tx) {        //tx.executeSql('SELECT * FROM Umpire ORDER BY inning', [], $scope.querySuccess, $scope.errorCB);        tx.executeSql('SELECT COUNT(*) cnt FROM sqlite_master WHERE type="' + 'table' + '"AND name="' + 'table' + '"', [], $scope.querySuccess, $scope.errorCB);    };    // スコアのデータを更新    $scope.updateScore = function(){        // データベースオブジェクト取得        $scope.db = $scope.getDB();        // スコアを更新        $scope.db.transaction($scope.exeScoreUpdate, $scope.errorDB);    };    // スコアボードテーブルのチェッククエリー    $scope.exeScoreUpdate = function (tx) {        var sl = $scope.scoreList;        for (var i=0; i<sl.length; i++){            console.log('UPDATE Umpire SET first = "' + sl[i].first + '", second = "' + sl[i].second + '" WHERE inning = "' + sl[i].inning + '" AND id = "' + $scope.uid + '"');            tx.executeSql('UPDATE Umpire SET first = "' + sl[i].first + '", second = "' + sl[i].second + '" WHERE inning = "' + sl[i].inning + '" AND id = "' + $scope.uid + '"');        }            };});// サブストリングmodule.filter('substr', function() {    return function(input, from, to) {        var inputtext = String(input);        return inputtext.substring(from, to);            }});// スコアボードのイニング表示module.filter('summary', function() {    return function(inning) {        var ini = "";        switch (inning){            case 0:                ini = '　';            break;            case 10:                ini = 'R';            break;            case 11:                ini = 'H';            break;            case 12:                ini = 'E';            break;            default:                ini = inning;        }        return ini;            }});// ダイアログのイニング表示module.filter('summary2', function() {    return function(inning) {                var ini = "";                switch (inning){            case 0:                ini = '';            break;            case 10:                ini = 'R';            break;            case 11:                ini = 'H';            break;            case 12:                ini = 'E';            break;            default:                ini = inning + ' inning';        }                return ini;            }});// ダイアログ得点の表示module.filter('filpoint', function() {    return function(point) {        if (point === '') {            return 'NONE';        }        return point;            }});// チーム名編集のダイアログ表示のヘッダーmodule.filter('filteam', function() {    return function(teamnum) {        if (teamnum == 0) {           return 'TEAM1 EDIT';        }        return 'TEAM2 EDIT';            }});